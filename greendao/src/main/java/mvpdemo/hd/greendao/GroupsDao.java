package mvpdemo.hd.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;
import mvpdemo.hd.greendao.entity.LongConverter;

import mvpdemo.hd.greendao.entity.Groups;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUPS".
*/
public class GroupsDao extends AbstractDao<Groups, Long> {

    public static final String TABLENAME = "GROUPS";

    /**
     * Properties of entity Groups.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Memo = new Property(2, String.class, "memo", false, "MEMO");
        public final static Property Word_ids = new Property(3, String.class, "word_ids", false, "WORD_IDS");
    }

    private final LongConverter word_idsConverter = new LongConverter();

    public GroupsDao(DaoConfig config) {
        super(config);
    }
    
    public GroupsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"MEMO\" TEXT," + // 2: memo
                "\"WORD_IDS\" TEXT);"); // 3: word_ids
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Groups entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(3, memo);
        }
 
        List word_ids = entity.getWord_ids();
        if (word_ids != null) {
            stmt.bindString(4, word_idsConverter.convertToDatabaseValue(word_ids));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Groups entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(3, memo);
        }
 
        List word_ids = entity.getWord_ids();
        if (word_ids != null) {
            stmt.bindString(4, word_idsConverter.convertToDatabaseValue(word_ids));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Groups readEntity(Cursor cursor, int offset) {
        Groups entity = new Groups( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // memo
            cursor.isNull(offset + 3) ? null : word_idsConverter.convertToEntityProperty(cursor.getString(offset + 3)) // word_ids
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Groups entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMemo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWord_ids(cursor.isNull(offset + 3) ? null : word_idsConverter.convertToEntityProperty(cursor.getString(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Groups entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Groups entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Groups entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
