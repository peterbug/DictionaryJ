package mvpdemo.hd.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;
import mvpdemo.hd.greendao.entity.LongConverter;

import mvpdemo.hd.greendao.entity.Word;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORD".
*/
public class WordDao extends AbstractDao<Word, Long> {

    public static final String TABLENAME = "WORD";

    /**
     * Properties of entity Word.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Spell = new Property(1, String.class, "spell", false, "SPELL");
        public final static Property Phoneti = new Property(2, String.class, "phoneti", false, "PHONETI");
        public final static Property Meaning = new Property(3, String.class, "meaning", false, "MEANING");
        public final static Property StrangeLevel = new Property(4, Long.class, "strangeLevel", false, "STRANGE_LEVEL");
        public final static Property CreateDate = new Property(5, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property GroupIds = new Property(6, String.class, "groupIds", false, "GROUP_IDS");
    }

    private final LongConverter groupIdsConverter = new LongConverter();

    public WordDao(DaoConfig config) {
        super(config);
    }
    
    public WordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SPELL\" TEXT," + // 1: spell
                "\"PHONETI\" TEXT," + // 2: phoneti
                "\"MEANING\" TEXT," + // 3: meaning
                "\"STRANGE_LEVEL\" INTEGER," + // 4: strangeLevel
                "\"CREATE_DATE\" INTEGER," + // 5: createDate
                "\"GROUP_IDS\" TEXT);"); // 6: groupIds
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(2, spell);
        }
 
        String phoneti = entity.getPhoneti();
        if (phoneti != null) {
            stmt.bindString(3, phoneti);
        }
 
        String meaning = entity.getMeaning();
        if (meaning != null) {
            stmt.bindString(4, meaning);
        }
 
        Long strangeLevel = entity.getStrangeLevel();
        if (strangeLevel != null) {
            stmt.bindLong(5, strangeLevel);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(6, createDate.getTime());
        }
 
        List groupIds = entity.getGroupIds();
        if (groupIds != null) {
            stmt.bindString(7, groupIdsConverter.convertToDatabaseValue(groupIds));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(2, spell);
        }
 
        String phoneti = entity.getPhoneti();
        if (phoneti != null) {
            stmt.bindString(3, phoneti);
        }
 
        String meaning = entity.getMeaning();
        if (meaning != null) {
            stmt.bindString(4, meaning);
        }
 
        Long strangeLevel = entity.getStrangeLevel();
        if (strangeLevel != null) {
            stmt.bindLong(5, strangeLevel);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(6, createDate.getTime());
        }
 
        List groupIds = entity.getGroupIds();
        if (groupIds != null) {
            stmt.bindString(7, groupIdsConverter.convertToDatabaseValue(groupIds));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Word readEntity(Cursor cursor, int offset) {
        Word entity = new Word( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // spell
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phoneti
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // meaning
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // strangeLevel
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // createDate
            cursor.isNull(offset + 6) ? null : groupIdsConverter.convertToEntityProperty(cursor.getString(offset + 6)) // groupIds
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Word entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpell(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhoneti(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMeaning(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStrangeLevel(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setGroupIds(cursor.isNull(offset + 6) ? null : groupIdsConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Word entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Word entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Word entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
